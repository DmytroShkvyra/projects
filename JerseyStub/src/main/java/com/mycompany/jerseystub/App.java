package com.mycompany.jerseystub;

import com.mycompany.jerseystub.domains.cluster.Cluster;
import com.mycompany.jerseystub.domains.cluster.Clusters;
import com.mycompany.jerseystub.domains.configurations.ConfigProperties;
import com.mycompany.jerseystub.domains.configurations.RegistrationResponse;
import com.mycompany.jerseystub.restclients.AgentResource;
import com.mycompany.jerseystub.restclients.ClusterService;
import com.mycompany.jerseystub.restclients.ComponentService;
import com.mycompany.jerseystub.restclients.ConfigurationService;
import com.mycompany.jerseystub.restclients.HostComponentService;
import com.mycompany.jerseystub.restclients.HostService;
import com.mycompany.jerseystub.restclients.ServiceService;
import javax.xml.parsers.ParserConfigurationException;
import org.apache.ambari.server.agent.HeartBeatResponse;
import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;

/**
 * Hello world!
 *
 */
public class App 
{
    public static void main( String[] args ) throws ParserConfigurationException, SAXNotRecognizedException, SAXNotSupportedException, JSONException
    {
        JSONObject json;
        ClusterService client = new ClusterService();
        String s;
        Cluster cluster = new Cluster("HDP-1.2.0");
        Clusters clusters = new Clusters();
        clusters.clusters.add(cluster);
        String clusterName = "c1";
        System.out.println("-------------------------Create cluster---------------------------");
        s = client.postCreateCluster(String.class, clusterName, clusters);
        System.out.println("^ clusterName="+clusterName+" version="+cluster.version+" "+s);
        System.out.println("-------------------------Create service---------------------");
        String serviceName = "HDFS";
        ServiceService client1 = new ServiceService();
        s = client1.postCreateServices(String.class, clusterName, serviceName);
        System.out.println("^ clusterName="+clusterName+" serviceName="+serviceName+" "+s);
        serviceName = "MAPREDUCE";
        s = client1.postCreateServices(String.class, clusterName, serviceName);
        System.out.println("^ clusterName="+clusterName+" serviceName="+serviceName+" "+s);
        serviceName = "ZOOKEEPER";
        s = client1.postCreateServices(String.class, clusterName, serviceName);
        System.out.println("^ clusterName="+clusterName+" serviceName="+serviceName+" "+s);
        serviceName = "HBASE";
        s = client1.postCreateServices(String.class, clusterName, serviceName);
        System.out.println("^ clusterName="+clusterName+" serviceName="+serviceName+" "+s);
        serviceName = "GANGLIA";
        s = client1.postCreateServices(String.class, clusterName, serviceName);
        System.out.println("^ clusterName="+clusterName+" serviceName="+serviceName+" "+s);
        serviceName = "NAGIOS";
        s = client1.postCreateServices(String.class, clusterName, serviceName);
        System.out.println("^ clusterName="+clusterName+" serviceName="+serviceName+" "+s);
        System.out.println("-------------------------Config cluster---------------------");
        ConfigurationService client2 = new ConfigurationService();
        ConfigProperties configurations = new ConfigProperties();
        configurations.type = "core-site";
        configurations.tag = "version1";
        ConfigProperties properties = new ConfigProperties();
        properties.fs_default_name = "localhost:8020";
        configurations.properties = properties;
        s = client2.postCreateConfigurations(String.class, clusterName, configurations);
        System.out.println("^ clusterName="+clusterName+" configurations="+configurations+" "+s);
        System.out.println("---------------------------------------------------------------");
        configurations = new ConfigProperties();
        configurations.type = "hdfs-site";
        configurations.tag = "version1";
        properties = new ConfigProperties();
        properties.dfs_datanode_data_dir_perm = "750";
        configurations.properties = properties;
        s = client2.postCreateConfigurations(String.class, clusterName, configurations);
        System.out.println("^ clusterName="+clusterName+" configurations="+configurations+" "+s);
        System.out.println("---------------------------------------------------------------");
        configurations = new ConfigProperties();
        configurations.type = "global";
        configurations.tag = "version1";
        properties = new ConfigProperties();
        properties.hbase_hdfs_root_dir = "/apps/hbase/";
        configurations.properties = properties;
        s = client2.postCreateConfigurations(String.class, clusterName, configurations);
        System.out.println("^ clusterName="+clusterName+" configurations="+configurations+" "+s);
        System.out.println("---------------------------------------------------------------");
        configurations = new ConfigProperties();
        configurations.type = "mapred-site";
        configurations.tag = "version1";
        properties = new ConfigProperties();
        properties.mapred_job_tracker = "localhost:50300";
        properties.mapreduce_history_server_embedded = "false";
        properties.mapreduce_history_server_http_address = "localhost:51111"; 
        configurations.properties = properties;
        s = client2.postCreateConfigurations(String.class, clusterName, configurations);
        System.out.println("^ clusterName="+clusterName+" configurations="+configurations+" "+s);
        System.out.println("---------------------------------------------------------------");
        configurations = new ConfigProperties();
        configurations.type = "hbase-site";
        configurations.tag = "version1";
        properties = new ConfigProperties();
        properties.hbase_rootdir = "hdfs://localhost:8020/apps/hbase/";
        properties.hbase_cluster_distributed = "true";
        properties.hbase_zookeeper_quorum = "localhost";
        properties.zookeeper_session_timeout = "60000";
        configurations.properties = properties;
        s = client2.postCreateConfigurations(String.class, clusterName, configurations);
        System.out.println("^ clusterName="+clusterName+" configurations="+configurations+" "+s);
        System.out.println("---------------------------------------------------------------"); 
        configurations = new ConfigProperties();
        configurations.type = "hbase-env";
        configurations.tag = "version1";
        properties = new ConfigProperties();
        properties.hbase_hdfs_root_dir = "/apps/hbase/";
        configurations.properties = properties;
        s = client2.postCreateConfigurations(String.class, clusterName, configurations);
        System.out.println("^ clusterName="+clusterName+" configurations="+configurations+" "+s);
        System.out.println("---------------------------------------------------------------"); 
        configurations = new ConfigProperties();
        configurations.type = "nagios-global";
        configurations.tag = "version2";
        properties = new ConfigProperties();
        properties.nagios_web_login = "nagiosadmin";
        properties.nagios_web_password = "password";
        properties.nagios_contact = "a\u0040b.c";      
        configurations.properties = properties;
        s = client2.postCreateConfigurations(String.class, clusterName, configurations);
        System.out.println("^ clusterName="+clusterName+" configurations="+configurations+" "+s);
        System.out.println("---------------------------------------------------------------"); 
        configurations = new ConfigProperties();
        configurations.type = "nagios-global";
        configurations.tag = "version1";
        properties = new ConfigProperties();
        properties.nagios_web_login = "nagiosadmin";
        properties.nagios_web_password = "password";
        configurations.properties = properties;
        s = client2.postCreateConfigurations(String.class, clusterName, configurations);
        System.out.println("^ clusterName="+clusterName+" configurations="+configurations+" "+s);
        System.out.println("------------------------Config services-----------------------"); 
        serviceName = "HDFS";
        configurations = new ConfigProperties();
        configurations.config = new ConfigProperties();
        configurations.config.core_site = "version1";
        configurations.config.hdfs_site = "version1";
        configurations.config.global = "version1";
        s = client1.putUpdateService(String.class, clusterName, serviceName, null, configurations);
        System.out.println("^ clusterName="+clusterName+" serviceName="+serviceName+" configurations="+configurations+" "+s);
        System.out.println("---------------------------------------------------------------");
        serviceName = "MAPREDUCE";
        configurations = new ConfigProperties();
        configurations.config = new ConfigProperties();
        configurations.config.core_site = "version1";
        configurations.config.mapred_site = "version1";
        s = client1.putUpdateService(String.class, clusterName, serviceName, null, configurations);
        System.out.println("^ clusterName="+clusterName+" serviceName="+serviceName+" configurations="+configurations+" "+s);
        System.out.println("---------------------------------------------------------------");
        serviceName = "HBASE";
        configurations = new ConfigProperties();
        configurations.config = new ConfigProperties();
        configurations.config.hbase_site = "version1";
        configurations.config.hbase_env = "version1";
        s = client1.putUpdateService(String.class, clusterName, serviceName, null, configurations);
        System.out.println("^ clusterName="+clusterName+" serviceName="+serviceName+" configurations="+configurations+" "+s);
        System.out.println("---------------------------------------------------------------");
        serviceName = "NAGIOS";
        configurations = new ConfigProperties();
        configurations.config = new ConfigProperties();
        configurations.config.nagios_global = "version2";
        s = client1.putUpdateService(String.class, clusterName, serviceName, null, configurations);
        System.out.println("^ clusterName="+clusterName+" serviceName="+serviceName+" configurations="+configurations+" "+s);
        System.out.println("------------------------Create components----------------------"); 
        ComponentService client3 = new ComponentService();
        String componentName = "NAMENODE";
        serviceName = "HDFS";
        s = client3.postCreateComponent(String.class, clusterName, serviceName, componentName);
        System.out.println("^ clusterName="+clusterName+" serviceName="+serviceName+" componentName="+componentName+" "+s);
        System.out.println("---------------------------------------------------------------");        
        componentName = "SECONDARY_NAMENODE";
        serviceName = "HDFS";
        s = client3.postCreateComponent(String.class, clusterName, serviceName, componentName);
        System.out.println("^ clusterName="+clusterName+" serviceName="+serviceName+" componentName="+componentName+" "+s);
        System.out.println("---------------------------------------------------------------"); 
        componentName = "DATANODE";
        serviceName = "HDFS";
        s = client3.postCreateComponent(String.class, clusterName, serviceName, componentName);
        System.out.println("^ clusterName="+clusterName+" serviceName="+serviceName+" componentName="+componentName+" "+s);
        System.out.println("---------------------------------------------------------------");
        componentName = "HDFS_CLIENT";
        serviceName = "HDFS";
        s = client3.postCreateComponent(String.class, clusterName, serviceName, componentName);
        System.out.println("^ clusterName="+clusterName+" serviceName="+serviceName+" componentName="+componentName+" "+s);
        System.out.println("---------------------------------------------------------------");
        componentName = "JOBTRACKER";
        serviceName = "MAPREDUCE";
        s = client3.postCreateComponent(String.class, clusterName, serviceName, componentName);
        System.out.println("^ clusterName="+clusterName+" serviceName="+serviceName+" componentName="+componentName+" "+s);
        System.out.println("---------------------------------------------------------------");
        componentName = "TASKTRACKER";
        serviceName = "MAPREDUCE";
        s = client3.postCreateComponent(String.class, clusterName, serviceName, componentName);
        System.out.println("^ clusterName="+clusterName+" serviceName="+serviceName+" componentName="+componentName+" "+s);
        System.out.println("---------------------------------------------------------------");
        componentName = "ZOOKEEPER_SERVER";
        serviceName = "ZOOKEEPER";
        s = client3.postCreateComponent(String.class, clusterName, serviceName, componentName);
        System.out.println("^ clusterName="+clusterName+" serviceName="+serviceName+" componentName="+componentName+" "+s);
        System.out.println("---------------------------------------------------------------");
        componentName = "HBASE_MASTER";
        serviceName = "HBASE";
        s = client3.postCreateComponent(String.class, clusterName, serviceName, componentName);
        System.out.println("^ clusterName="+clusterName+" serviceName="+serviceName+" componentName="+componentName+" "+s);
        System.out.println("---------------------------------------------------------------"); 
        componentName = "HBASE_REGIONSERVER";
        serviceName = "HBASE";
        s = client3.postCreateComponent(String.class, clusterName, serviceName, componentName);
        System.out.println("^ clusterName="+clusterName+" serviceName="+serviceName+" componentName="+componentName+" "+s);
        System.out.println("---------------------------------------------------------------");
        componentName = "HBASE_CLIENT";
        serviceName = "HBASE";
        s = client3.postCreateComponent(String.class, clusterName, serviceName, componentName);
        System.out.println("^ clusterName="+clusterName+" serviceName="+serviceName+" componentName="+componentName+" "+s);
        System.out.println("---------------------------------------------------------------"); 
        componentName = "GANGLIA_SERVER";
        serviceName = "GANGLIA";
        s = client3.postCreateComponent(String.class, clusterName, serviceName, componentName);
        System.out.println("^ clusterName="+clusterName+" serviceName="+serviceName+" componentName="+componentName+" "+s);
        System.out.println("---------------------------------------------------------------");
        componentName = "GANGLIA_MONITOR";
        serviceName = "GANGLIA";
        s = client3.postCreateComponent(String.class, clusterName, serviceName, componentName);
        System.out.println("^ clusterName="+clusterName+" serviceName="+serviceName+" componentName="+componentName+" "+s);
        System.out.println("---------------------------------------------------------------");
        componentName = "NAGIOS_SERVER";
        serviceName = "NAGIOS";
        s = client3.postCreateComponent(String.class, clusterName, serviceName, componentName);
        System.out.println("^ clusterName="+clusterName+" serviceName="+serviceName+" componentName="+componentName+" "+s);
        System.out.println("**********************Register agent*********************");
        AgentResource agentResource = new AgentResource();
        //String agent = "{\"hardwareProfile\": {\"lsbrelease\": \":core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch\", \"ipaddress_lo\": \"127.0.0.1\", \"selinux\": \"true\", \"memorytotal\": 7644119, \"swapfree\": \"0.00 kB\", \"processorcount\": \"2\", \"ec2_public_ipv4\": \"54.242.113.69\", \"virtual\": \"physical\", \"operatingsystem\": \"RedHat\", \"netmask_lo\": \"255.0.0.0\", \"lsbmajdistrelease\": \"6\", \"rubyversion\": \"1.8.7\", \"kernelrelease\": \"2.6.32-276.el6.x86_64\", \"facterversion\": \"1.6.10\", \"is_virtual\": false, \"network_lo\": \"127.0.0.0\", \"ec2_block_device_mapping_root\": \"/dev/sda1\", \"memoryfree\": 7434403, \"uptime_seconds\": \"3581\", \"ec2_reservation_id\": \"r-a45a5bdc\", \"sshdsakey\": \"AAAAB3NzaC1kc3MAAACBALTiLMZymPqmMFgMuK1OjT/QdWaf08BNanzzbrYzNlemIUShds3UIOlhMP20bbylznSTMwStXCo+71wqnMyHaDoexWyl2vNQvvjg3OOUI5RSLB5ElIusRSxY21lkVVK9cKiFqmEYE5HB38eKvhNFOAO6wPbKkV6SGi7U1QTzJBvjAAAAFQC4CRJ10VYudsX0mZ9NM0n/V8B6ZQAAAIAh5WIsel3oel8vmofBt4xNPkrB/PvzEd3D5rZGu+/6pchVvg+RhgEWKHSiG4vMn9yOkbYpMIeueyaOiK/uY4FBYG3/V8noZRoXQ09I2Lp9LUzNqDHm3cH4xFYxm1TLCKVmSEd84drUFAFTDzw4/If96ater6JOBMmpeBDYlp8MewAAAIAf4wgag5LmuklN5RWirTGn7KD5WIKsSVISJMnGXnxo13w7dfQ0pZdZONawdfUQjq1jpMeVn+uoEq2MdC7S5h3i6mN8gCalbK8sXNnKzJ65I89lzSCB16m1sYx+Z3chFHaOulKEYoVhHPVWBLHu7YE9fYnoojPFmU6yaChsWdTp0g==\", \"ec2_block_device_mapping_ami\": \"/dev/sda1\", \"selinux_enforced\": \"true\", \"memorysize\": 7644119, \"swapsize\": \"0.00 kB\", \"ec2_public_keys_0_openssh_key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC4YhcNwxMvZLyLECWfJyqf5rdk+R+DM2gzt0cEFYu9/SVV3GWAGvESevGCMEZaqapMDWgY+9n5uFgQRKo8UeVH1cJuRqQUZOY44ZiZokiMZ+kkY5rPOj44ArKXvqQDz0DB1EVyMYB8LATjloDtcghl51Z/y2hXMjaxpewYokTh8YTeMPvyBYvvIuRIW0EOMMDLXfR3EXaLwQAtlDjWkQYezFnkNM4lQsYJ50ohb/DA68ZCBhvTYqPYPbFmeNHubt/ymucecDaAJFbwmdHf6j+8xbT/HH/4GbCUXgU9RNCKgJfBlOcgEEBCy0cbg/hFz2sawMA+epuX4OhY2s9atugV ec2-keypair\", \"uniqueid\": \"760ae35a\", \"kernelmajversion\": \"2.6\", \"macaddress\": \"12:31:3D:08:4D:15\", \"ec2_hostname\": \"ip-10-118-90-227.ec2.internal\", \"lsbdistid\": \"RedHatEnterpriseServer\", \"network_eth0\": \"10.118.90.0\", \"uptime_hours\": \"0\", \"ec2_security_groups\": \"default\", \"rubysitedir\": \"/usr/lib/ambari-agent/lib/ruby-1.8.7-p370/lib/ruby/site_ruby/1.8\", \"architecture\": \"x86_64\", \"netmask_eth0\": \"255.255.254.0\", \"mounts\": [{\"available\": \"3960980\", \"used\": \"1884736\", \"percent\": \"33%\", \"device\": \"/dev/xvde1\", \"mountpoint\": \"/\", \"type\": \"ext4\", \"size\": \"5905712\"}, {\"available\": \"3823076\", \"used\": \"0\", \"percent\": \"0%\", \"device\": \"none\", \"mountpoint\": \"/dev/shm\", \"type\": \"tmpfs\", \"size\": \"3823076\"}, {\"available\": \"411234588\", \"used\": \"203012\", \"percent\": \"1%\", \"device\": \"/dev/xvdg\", \"mountpoint\": \"/grid/0\", \"type\": \"ext3\", \"size\": \"433455904\"}, {\"available\": \"411234588\", \"used\": \"203012\", \"percent\": \"1%\", \"device\": \"/dev/xvdf\", \"mountpoint\": \"/grid/1\", \"type\": \"ext3\", \"size\": \"433455904\"}], \"arp\": \"fe:ff:ff:ff:ff:ff\", \"kernel\": \"Linux\", \"domain\": \"ec2.internal\", \"selinux_mode\": \"targeted\", \"uptime_days\": \"0\", \"ec2_ami_launch_index\": \"1\", \"ec2_public_hostname\": \"ec2-54-242-113-69.compute-1.amazonaws.com\", \"selinux_config_policy\": \"targeted\", \"ec2_instance_type\": \"m1.large\", \"ec2_profile\": \"default-paravirtual\", \"selinux_config_mode\": \"enforcing\", \"timezone\": \"EST\", \"hardwareisa\": \"x86_64\", \"id\": \"root\", \"ec2_ami_id\": \"ami-89ad18e0\", \"ec2_local_hostname\": \"ip-10-118-90-227.ec2.internal\", \"uptime\": \"0:59 hours\", \"macaddress_eth0\": \"12:31:3D:08:4D:15\", \"hostname\": \"ip-10-118-90-227\", \"ec2_block_device_mapping_ephemeral1\": \"/dev/sdc\", \"ec2_block_device_mapping_ephemeral0\": \"/dev/sdb\", \"ec2_placement_availability_zone\": \"us-east-1c\", \"ec2_ami_manifest_path\": \"(unknown)\", \"ec2_instance_id\": \"i-cdfd7dbc\", \"ec2_local_ipv4\": \"10.118.90.227\", \"arp_eth0\": \"fe:ff:ff:ff:ff:ff\", \"hardwaremodel\": \"x86_64\", \"osfamily\": \"RedHat\", \"sshrsakey\": \"AAAAB3NzaC1yc2EAAAABIwAAAQEAo7SokPyUZuOzWvTRArcEeC/DqdKv+qGrIEcG9rb08C7U8ephWT5YOtweZ+0Lc8q8hs+IJemycDAO/5sCAeQ1sYWPqZ+bet92fpwe7ONec9iKSHIjAvAuzi8gXd4O9BXYcQCJVfB/iizasglyacDtpYknqbS2PaQCwciZTythtcYw6sX96hEiq+gIfThlW3RmLzJISKDin3AZrqNi9P7N6yKXy+98d8dfLwtvH+sxUw9AM7qcqdY9kKMrkJM4LvwdlkVMeIV4Ec7NUTvL4I7L23AclxMe01AXrvztPTHREyY2kfEEQas8EbWy02g7A9ziSzeBhcwiG9bpLmRal1OlNQ==\", \"ps\": \"ps -ef\", \"physicalprocessorcount\": 1, \"interfaces\": \"eth0,lo\", \"selinux_policyversion\": \"24\", \"ec2_kernel_id\": \"aki-08ed0761\", \"path\": \"/usr/lib/ambari-agent/lib/ruby-1.8.7-p370/bin:/usr/lib/ambari-server/*:/usr/lib64/qt-3.3/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\", \"ipaddress\": \"10.118.90.227\", \"lsbdistdescription\": \"Red Hat Enterprise Linux Server release 6.3 (Santiago)\", \"kernelversion\": \"2.6.32\", \"operatingsystemrelease\": \"6.3\", \"processor0\": \"Intel(R) Xeon(R) CPU           E5507  @ 2.27GHz\", \"processor1\": \"Intel(R) Xeon(R) CPU           E5507  @ 2.27GHz\", \"fqdn\": \"ip-10-118-90-227.ec2.internal\", \"lsbdistcodename\": \"Santiago\", \"lsbdistrelease\": \"6.3\", \"ipaddress_eth0\": \"10.118.90.227\", \"selinux_current_mode\": \"enforcing\", \"netmask\": \"255.255.254.0\"}, \"timestamp\": 1357658260140, \"hostname\": \"ip-10-118-90-227.ec2.internal\", \"responseId\": -1, \"publicHostname\": \"ec2-54-242-113-69.compute-1.amazonaws.com\"}";
        json = new JSONObject();
        json.put("responseId" , -1);
        json.put("timestamp" , System.currentTimeMillis());
        json.put("hostname",   "dshkvyra");
        json.put("publicHostname",   "dshkvyra");
        json.put("hardwareProfile", (new JSONObject()).put("operatingsystem", "RedHat").put("operatingsystemrelease", "6.3"));
        RegistrationResponse response = agentResource.postRegister(RegistrationResponse.class, "dshkvyra", json);
        System.out.println(json+" "+response);
        System.out.println("**********************Send heartbeat*********************");
        //String agent = "{\"hardwareProfile\": {\"lsbrelease\": \":core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch\", \"ipaddress_lo\": \"127.0.0.1\", \"selinux\": \"true\", \"memorytotal\": 7644119, \"swapfree\": \"0.00 kB\", \"processorcount\": \"2\", \"ec2_public_ipv4\": \"54.242.113.69\", \"virtual\": \"physical\", \"operatingsystem\": \"RedHat\", \"netmask_lo\": \"255.0.0.0\", \"lsbmajdistrelease\": \"6\", \"rubyversion\": \"1.8.7\", \"kernelrelease\": \"2.6.32-276.el6.x86_64\", \"facterversion\": \"1.6.10\", \"is_virtual\": false, \"network_lo\": \"127.0.0.0\", \"ec2_block_device_mapping_root\": \"/dev/sda1\", \"memoryfree\": 7434403, \"uptime_seconds\": \"3581\", \"ec2_reservation_id\": \"r-a45a5bdc\", \"sshdsakey\": \"AAAAB3NzaC1kc3MAAACBALTiLMZymPqmMFgMuK1OjT/QdWaf08BNanzzbrYzNlemIUShds3UIOlhMP20bbylznSTMwStXCo+71wqnMyHaDoexWyl2vNQvvjg3OOUI5RSLB5ElIusRSxY21lkVVK9cKiFqmEYE5HB38eKvhNFOAO6wPbKkV6SGi7U1QTzJBvjAAAAFQC4CRJ10VYudsX0mZ9NM0n/V8B6ZQAAAIAh5WIsel3oel8vmofBt4xNPkrB/PvzEd3D5rZGu+/6pchVvg+RhgEWKHSiG4vMn9yOkbYpMIeueyaOiK/uY4FBYG3/V8noZRoXQ09I2Lp9LUzNqDHm3cH4xFYxm1TLCKVmSEd84drUFAFTDzw4/If96ater6JOBMmpeBDYlp8MewAAAIAf4wgag5LmuklN5RWirTGn7KD5WIKsSVISJMnGXnxo13w7dfQ0pZdZONawdfUQjq1jpMeVn+uoEq2MdC7S5h3i6mN8gCalbK8sXNnKzJ65I89lzSCB16m1sYx+Z3chFHaOulKEYoVhHPVWBLHu7YE9fYnoojPFmU6yaChsWdTp0g==\", \"ec2_block_device_mapping_ami\": \"/dev/sda1\", \"selinux_enforced\": \"true\", \"memorysize\": 7644119, \"swapsize\": \"0.00 kB\", \"ec2_public_keys_0_openssh_key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC4YhcNwxMvZLyLECWfJyqf5rdk+R+DM2gzt0cEFYu9/SVV3GWAGvESevGCMEZaqapMDWgY+9n5uFgQRKo8UeVH1cJuRqQUZOY44ZiZokiMZ+kkY5rPOj44ArKXvqQDz0DB1EVyMYB8LATjloDtcghl51Z/y2hXMjaxpewYokTh8YTeMPvyBYvvIuRIW0EOMMDLXfR3EXaLwQAtlDjWkQYezFnkNM4lQsYJ50ohb/DA68ZCBhvTYqPYPbFmeNHubt/ymucecDaAJFbwmdHf6j+8xbT/HH/4GbCUXgU9RNCKgJfBlOcgEEBCy0cbg/hFz2sawMA+epuX4OhY2s9atugV ec2-keypair\", \"uniqueid\": \"760ae35a\", \"kernelmajversion\": \"2.6\", \"macaddress\": \"12:31:3D:08:4D:15\", \"ec2_hostname\": \"ip-10-118-90-227.ec2.internal\", \"lsbdistid\": \"RedHatEnterpriseServer\", \"network_eth0\": \"10.118.90.0\", \"uptime_hours\": \"0\", \"ec2_security_groups\": \"default\", \"rubysitedir\": \"/usr/lib/ambari-agent/lib/ruby-1.8.7-p370/lib/ruby/site_ruby/1.8\", \"architecture\": \"x86_64\", \"netmask_eth0\": \"255.255.254.0\", \"mounts\": [{\"available\": \"3960980\", \"used\": \"1884736\", \"percent\": \"33%\", \"device\": \"/dev/xvde1\", \"mountpoint\": \"/\", \"type\": \"ext4\", \"size\": \"5905712\"}, {\"available\": \"3823076\", \"used\": \"0\", \"percent\": \"0%\", \"device\": \"none\", \"mountpoint\": \"/dev/shm\", \"type\": \"tmpfs\", \"size\": \"3823076\"}, {\"available\": \"411234588\", \"used\": \"203012\", \"percent\": \"1%\", \"device\": \"/dev/xvdg\", \"mountpoint\": \"/grid/0\", \"type\": \"ext3\", \"size\": \"433455904\"}, {\"available\": \"411234588\", \"used\": \"203012\", \"percent\": \"1%\", \"device\": \"/dev/xvdf\", \"mountpoint\": \"/grid/1\", \"type\": \"ext3\", \"size\": \"433455904\"}], \"arp\": \"fe:ff:ff:ff:ff:ff\", \"kernel\": \"Linux\", \"domain\": \"ec2.internal\", \"selinux_mode\": \"targeted\", \"uptime_days\": \"0\", \"ec2_ami_launch_index\": \"1\", \"ec2_public_hostname\": \"ec2-54-242-113-69.compute-1.amazonaws.com\", \"selinux_config_policy\": \"targeted\", \"ec2_instance_type\": \"m1.large\", \"ec2_profile\": \"default-paravirtual\", \"selinux_config_mode\": \"enforcing\", \"timezone\": \"EST\", \"hardwareisa\": \"x86_64\", \"id\": \"root\", \"ec2_ami_id\": \"ami-89ad18e0\", \"ec2_local_hostname\": \"ip-10-118-90-227.ec2.internal\", \"uptime\": \"0:59 hours\", \"macaddress_eth0\": \"12:31:3D:08:4D:15\", \"hostname\": \"ip-10-118-90-227\", \"ec2_block_device_mapping_ephemeral1\": \"/dev/sdc\", \"ec2_block_device_mapping_ephemeral0\": \"/dev/sdb\", \"ec2_placement_availability_zone\": \"us-east-1c\", \"ec2_ami_manifest_path\": \"(unknown)\", \"ec2_instance_id\": \"i-cdfd7dbc\", \"ec2_local_ipv4\": \"10.118.90.227\", \"arp_eth0\": \"fe:ff:ff:ff:ff:ff\", \"hardwaremodel\": \"x86_64\", \"osfamily\": \"RedHat\", \"sshrsakey\": \"AAAAB3NzaC1yc2EAAAABIwAAAQEAo7SokPyUZuOzWvTRArcEeC/DqdKv+qGrIEcG9rb08C7U8ephWT5YOtweZ+0Lc8q8hs+IJemycDAO/5sCAeQ1sYWPqZ+bet92fpwe7ONec9iKSHIjAvAuzi8gXd4O9BXYcQCJVfB/iizasglyacDtpYknqbS2PaQCwciZTythtcYw6sX96hEiq+gIfThlW3RmLzJISKDin3AZrqNi9P7N6yKXy+98d8dfLwtvH+sxUw9AM7qcqdY9kKMrkJM4LvwdlkVMeIV4Ec7NUTvL4I7L23AclxMe01AXrvztPTHREyY2kfEEQas8EbWy02g7A9ziSzeBhcwiG9bpLmRal1OlNQ==\", \"ps\": \"ps -ef\", \"physicalprocessorcount\": 1, \"interfaces\": \"eth0,lo\", \"selinux_policyversion\": \"24\", \"ec2_kernel_id\": \"aki-08ed0761\", \"path\": \"/usr/lib/ambari-agent/lib/ruby-1.8.7-p370/bin:/usr/lib/ambari-server/*:/usr/lib64/qt-3.3/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\", \"ipaddress\": \"10.118.90.227\", \"lsbdistdescription\": \"Red Hat Enterprise Linux Server release 6.3 (Santiago)\", \"kernelversion\": \"2.6.32\", \"operatingsystemrelease\": \"6.3\", \"processor0\": \"Intel(R) Xeon(R) CPU           E5507  @ 2.27GHz\", \"processor1\": \"Intel(R) Xeon(R) CPU           E5507  @ 2.27GHz\", \"fqdn\": \"ip-10-118-90-227.ec2.internal\", \"lsbdistcodename\": \"Santiago\", \"lsbdistrelease\": \"6.3\", \"ipaddress_eth0\": \"10.118.90.227\", \"selinux_current_mode\": \"enforcing\", \"netmask\": \"255.255.254.0\"}, \"timestamp\": 1357658260140, \"hostname\": \"ip-10-118-90-227.ec2.internal\", \"responseId\": -1, \"publicHostname\": \"ec2-54-242-113-69.compute-1.amazonaws.com\"}";
            
        
        
        json = new JSONObject();
        json.put("responseId", 0);
    json.put("timestamp" , System.currentTimeMillis());
    json.put("hostname", "dshkvyra");
    json.put("nodeStatus", (new JSONObject()).put("cause", "NONE").put("status", "HEALTHY"));
    
        /*json.put("publicHostname",   "dshkvyra");
        json.put("hardwareProfile", (new JSONObject()).put("operatingsystem", "RedHat").put("operatingsystemrelease", "6.3"));*/
        HeartBeatResponse response1 = agentResource.postHeartbeat(HeartBeatResponse.class, "dshkvyra", json);
        System.out.println(json+" "+response1);        
        System.out.println("-------------------------Create hosts--------------------------");
        HostService client4 = new HostService();
        String hostName = "dshkvyra";
        s = client4.postCreateHosts(String.class, clusterName, hostName);
        System.out.println("^ clusterName="+clusterName+" hostName="+hostName+" "+s);
        System.out.println("--------------------Create host components---------------------"); 
        HostComponentService componentService = new HostComponentService();
        componentName = "NAMENODE";
        s = componentService.postCreateHostComponent(String.class, clusterName, hostName, componentName);
        System.out.println("^ clusterName="+clusterName+" hostName="+hostName+" componentName="+componentName+" "+s);
        System.out.println("---------------------------------------------------------------");
        componentName = "SECONDARY_NAMENODE";
        s = componentService.postCreateHostComponent(String.class, clusterName, hostName, componentName);
        System.out.println("^ clusterName="+clusterName+" hostName="+hostName+" componentName="+componentName+" "+s);
        System.out.println("---------------------------------------------------------------"); 
                componentName = "JOBTRACKER";
        s = componentService.postCreateHostComponent(String.class, clusterName, hostName, componentName);
        System.out.println("^ clusterName="+clusterName+" hostName="+hostName+" componentName="+componentName+" "+s);
        System.out.println("---------------------------------------------------------------"); 
                componentName = "DATANODE";
        s = componentService.postCreateHostComponent(String.class, clusterName, hostName, componentName);
        System.out.println("^ clusterName="+clusterName+" hostName="+hostName+" componentName="+componentName+" "+s);
        System.out.println("---------------------------------------------------------------"); 
                componentName = "TASKTRACKER";
        s = componentService.postCreateHostComponent(String.class, clusterName, hostName, componentName);
        System.out.println("^ clusterName="+clusterName+" hostName="+hostName+" componentName="+componentName+" "+s);
        System.out.println("---------------------------------------------------------------"); 
                componentName = "ZOOKEEPER_SERVER";
        s = componentService.postCreateHostComponent(String.class, clusterName, hostName, componentName);
        System.out.println("^ clusterName="+clusterName+" hostName="+hostName+" componentName="+componentName+" "+s);
        System.out.println("---------------------------------------------------------------"); 
                componentName = "GANGLIA_SERVER";
        s = componentService.postCreateHostComponent(String.class, clusterName, hostName, componentName);
        System.out.println("^ clusterName="+clusterName+" hostName="+hostName+" componentName="+componentName+" "+s);
        System.out.println("---------------------------------------------------------------"); 
                componentName = "GANGLIA_MONITOR";
        s = componentService.postCreateHostComponent(String.class, clusterName, hostName, componentName);
        System.out.println("^ clusterName="+clusterName+" hostName="+hostName+" componentName="+componentName+" "+s);
        System.out.println("---------------------------------------------------------------"); 
                componentName = "HDFS_CLIENT";
        s = componentService.postCreateHostComponent(String.class, clusterName, hostName, componentName);
        System.out.println("^ clusterName="+clusterName+" hostName="+hostName+" componentName="+componentName+" "+s);
        System.out.println("---------------------------------------------------------------"); 
                componentName = "HBASE_MASTER";
        s = componentService.postCreateHostComponent(String.class, clusterName, hostName, componentName);
        System.out.println("^ clusterName="+clusterName+" hostName="+hostName+" componentName="+componentName+" "+s);
        System.out.println("---------------------------------------------------------------"); 
                componentName = "HBASE_REGIONSERVER";
        s = componentService.postCreateHostComponent(String.class, clusterName, hostName, componentName);
        System.out.println("^ clusterName="+clusterName+" hostName="+hostName+" componentName="+componentName+" "+s);
        System.out.println("---------------------------------------------------------------"); 
                componentName = "HBASE_CLIENT";
        s = componentService.postCreateHostComponent(String.class, clusterName, hostName, componentName);
        System.out.println("^ clusterName="+clusterName+" hostName="+hostName+" componentName="+componentName+" "+s);
        System.out.println("---------------------------------------------------------------"); 
                componentName = "NAGIOS_SERVER";
        s = componentService.postCreateHostComponent(String.class, clusterName, hostName, componentName);
        System.out.println("^ clusterName="+clusterName+" hostName="+hostName+" componentName="+componentName+" "+s);
        System.out.println("----------------------------Init state--------------------------");
        serviceName = "HDFS";
        json = new JSONObject();
        json.put("ServiceInfo", (new JSONObject()).put("state", "INSTALLED"));
        
        s = client1.putUpdateService(String.class, clusterName, serviceName, null, json);
        System.out.println("^ clusterName="+clusterName+" serviceName="+serviceName+" "+s);
        System.out.println("----------------------Send command to agent--------------------");
        /*JSONObject json;
        ServiceService client1 = new ServiceService();
        String s,clusterName = "c1";*/
        
        json = new JSONObject();
        json.put("ServiceInfo", (new JSONObject()).put("state", "INSTALLED"));
        s = client1.putUpdateService(String.class, clusterName, null, "INIT", json);
        System.out.println("^ clusterName="+clusterName+" "+s);
        System.out.println("---------------------------------------------------------------");
        /*Foo f = client.getJSON(Foo.class, "HHHH");
        System.out.println(f);
        System.out.println("---------------------------------------------------------------");
        try{
        s = client.getTEXT(String.class, "HHHH");
        }catch(UniformInterfaceException e){
         s = e.getMessage();
        }
        System.out.println(s);
        System.out.println("---------------------------------------------------------------");
        f = null;
        try{
        f = client.getXML(Foo.class, "FOOOO");
        }catch(Exception ex){}
        System.out.println(f);
        System.out.println("---------------------------------------------------------------");
        UniformInterfaceException s2 = client.throwErrorHTML(UniformInterfaceException.class);
        System.out.println(s2);        
        System.out.println("---------------------------------------------------------------");
        NewJerseyClient client1 = new NewJerseyClient();
        s = client1.getTEXT(String.class, "POSTTTT");
        System.out.println(s);
        client1.close();
        client.close();*/
    }
}
